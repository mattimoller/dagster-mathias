name: PR

on:
  pull_request:
    branches: [master]
    types: [opened, synchronize, reopened, ready_for_review]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: write
  id-token: write
  pull-requests: write

jobs:
  poetry-run:
    env:
      GCP_PROJECT_ID: ${{ vars.GCP_PROJECT_ID_DEV }}
      ENV: ${{ vars.ENV_DEV }}
      GCP_PROJECT_NUMBER: ${{ vars.GCP_PROJECT_NUMBER_DEV }}
    name: Poetry run
    runs-on: ubuntu-latest
    strategy:
      matrix:
        command:
          - ruff check
          - ruff format --check --diff
          - mypy ./
          - pytest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Setup Python Environment
        uses: ./.github/actions/setup-python-env
      - name: ${{ matrix.command }}
        run: poetry run ${{ matrix.command }}

  # This is a clean way to have a set of depending jobs fail a dependent job
  # both when it itself fails, and well it is canceled.
  check-failed:
    name: Check for failed jobs
    runs-on: ubuntu-latest
    needs:
      - poetry-run
    if: failure() || cancelled()
    outputs:
      result: ${{ steps.check.output.result }}
    steps:
      - id: result
        run: echo "result=failed" >> "$GITHUB_OUTPUT"

  # In Github, we can require that only this single job completes successfully
  # to ensure that all jobs it depends on have to run successfully as well. If
  # any of the depended upon jobs are skipped, it will still succeed as
  # expected.
  pr-result:
    name: Result
    runs-on: ubuntu-latest
    needs:
      - check-failed
    if: always()
    steps:
      - run: |
          if test -n "${{ needs.check-failed.output.result }}"; then
            exit 1
          fi

  coverage-report:
    name: Report coverage
    env:
      GCP_PROJECT_ID: ${{ vars.GCP_PROJECT_ID_DEV }}
      ENV: ${{ vars.ENV_DEV }}
      GCP_PROJECT_NUMBER: ${{ vars.GCP_PROJECT_NUMBER_DEV }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
      - name: Setup Python Environment
        uses: ./.github/actions/setup-python-env
      - name: Run coverage
        run: |
          poetry run coverage run -m pytest
      - name: Python Coverage Comment
        uses: py-cov-action/python-coverage-comment-action@v3.23
        with:
          GITHUB_TOKEN: ${{ github.token }}

